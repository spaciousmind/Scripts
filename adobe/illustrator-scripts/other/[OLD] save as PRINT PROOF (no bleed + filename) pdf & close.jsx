/**********************************************************ADOBE SYSTEMS INCORPORATED Copyright 2005-2010 Adobe Systems Incorporated All Rights Reserved NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the termsof the Adobe license agreement accompanying it.  If you have received this file from a source other than Adobe, then your use, modification,or distribution of it requires the prior written permission of Adobe. *********************************************************//********************************************************** Save as PDFs.jsxDESCRIPTIONThis sample gets files specified by the user from the selected folder and batch processes them and saves them as PDFs in the user desired destination with the same file name. **********************************************************/// Main Code [Execution of script begins here]// uncomment to suppress Illustrator warning dialogs// app.userInteractionLevel = UserInteractionLevel.DONTDISPLAYALERTS;var destFolder, sourceFolder, files, fileType, sourceDoc, targetFile, pdfSaveOpts;//=============Find Current Documents path================//var CurrentPath = activeDocument.path;//=============Establish current documents destination===============//var folderPDF = Folder(CurrentPath);//=============Check if it exist, if not create it.============//if(!folderPDF.exists) folderPDF.create();var docName = app.activeDocument.name.match(/^.*[^.ai]/i); var myDoc = app.activeDocument.name.match();        if (folderPDF) {            if ( app.documents.length > 0 ) {                           var sourceDoc = app.activeDocument;                                  // Call function getNewName to get the name and file to save the pdf                targetFile = getNewName();                                // Call function getPDFOptions get the PDFSaveOptions for the files                pdfSaveOpts = getPDFOptions( );                                // Save as pdf                sourceDoc.save();				writeJobNumber();                sourceDoc.saveAs( targetFile, pdfSaveOpts );                sourceDoc.close();                                                             }            }                                //DONT NEED THIS FOR LABELS.        //open ai file again      //          app.open(File(CurrentPath + '/' + docName + '.ai'));        /*********************************************************getNewName: Function to get the new file name. The primaryname is the same as the source file.**********************************************************/function getNewName(){	var ext, docName, newName, saveInFile, docName;	docName = sourceDoc.name;	ext = '_HR_PROOF_nobleed.pdf'; // new extension for pdf file	newName = "";			for ( var i = 0 ; docName[i] != "." ; i++ )	{		newName += docName[i];	}	newName += ext; // full pdf name of the file		// Create a file object to save the pdf	saveInFile = new File( folderPDF + '/' + newName );		return saveInFile;}function getPDFOptions(){	// Create the PDFSaveOptions object to set the PDF options	var pdfSaveOpts = new PDFSaveOptions();		// Setting PDFSaveOptions properties. Please see the JavaScript Reference	// for a description of these properties.	// Add more properties here if you like	pdfSaveOpts.pDFPreset = "Inferno Print File (no bleed)";	    	// uncomment to view the pdfs after conversion.	// pdfSaveOpts.viewAfterSaving = true;		return pdfSaveOpts;}function writeJobNumber()  	{  		//alert("I'm doing something");  		var idoc = app.activeDocument;  		var ilayer = idoc.layers.add();  		ilayer.name = "job number";  		var pages = idoc.artboards.length; // number of artboards    		var margins = 20; // margin in points. 		for (i = 0; i<idoc.artboards.length; i++) // loop thru all artboards, and add input text from UI  		  {			var itext = ilayer.textFrames.add();  			itext.contents = sourceDoc.name; // actual name of the job (filename) 			//var fontSize = itext.textRange.characterAttributes.size;			var fontSize = 7;			var activeAB = idoc.artboards[i];  			var iartBounds = activeAB.artboardRect;  			var abright = iartBounds[2]-margins;  			var abbottom = iartBounds[3]+margins+fontSize;  			itext.left = abright;  			itext.textRange.paragraphAttributes.justification = Justification.RIGHT;                                                                            			itext.top = abbottom;          		} // end for loop thru all artboards  	} // end function doSomething();  